import sqlite3


CREATE_BEANS_TABLE = "CREATE TABLE IF NOT EXISTS beans (id INTEGER PRIMARY KEY, name TEXT, method TEXT, rating Integer);"


INSERT_BEAN = "INSERT INTO beans(name, method, rating) VALUES (?, ?, ?);"

GET_ALL_BEANS = "SELECT * FROM beans;"
GET_BEANS_BY_NAME = "SELECT * FROM beans WHERE name = ?;"
#SELECT STAR GETS ALL THE COLUMNS FRM THE TABLE
GET_BEST_PREPARATION_FOR_BEAN = """
SELECT * FROM beans
WHERE name = ?
ORDER BY rating DESC
LIMIT 1;"""

DELETE_BEAN_NAME = """
DELETE FROM beans
WHERE name = ?
"""

DELETE_BEAN_ID = """
DELETE FROM beans
WHERE id = ?
"""

SELECT_BEAN_RATING_RANGE = """
SELECT *
FROM beans
WHERE rating >= ? AND ? >= rating"""



#establishes connection to a SQLite databse named "data.db"
def connect():
    return sqlite3.connect("data.db")

#Connection is used to execute the SQL query'
#Creates a table named beans if it doesn't already exist
#"With connection" ensures that any changes automatically go to the database.
#If there are any issues, with connection ensures that it would rol back easily
def create_tables(connection):
    with connection:
        connection.execute(CREATE_BEANS_TABLE)

def add_bean(connection, name, method, rating):
    with connection:
        return connection.execute(INSERT_BEAN, (name, method, rating))

def get_all_beans(connection):
    with connection:
        return connection.execute(GET_ALL_BEANS).fetchall()

def get_beans_by_name(connection, name):
    with connection:
        connection.execute(GET_BEANS_BY_NAME, (name,)).fetchall()

def get_best_preparation_for_bean(connection, name):
    with connection:
        return connection.execute(GET_BEST_PREPARATION_FOR_BEAN, (name,)).fetchone()

def delete_bean_by_name(connection, name):
    with connection:
        connection.execute(DELETE_BEAN_NAME, (name,))

def delete_bean_by_ID(connection, bean_id):
    with connection:
        connection.execute(DELETE_BEAN_ID, (bean_id,))

def find_bean_by_range(connection, start_range, end_range):
    with connection:
        return connection.execute(SELECT_BEAN_RATING_RANGE, (start_range, end_range)).fetchall()
